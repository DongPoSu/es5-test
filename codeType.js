// 缩进:统一空格缩进
/*
区块:大括号跟在代码尾部，不能省略,下面的都不行
if(1)
	x();
if(x)
{
	
}
*/
if('1'){
	console.log("")
}

// 分号:必须写
var a = 12;
function c() {
	console.log(a);
}
// 分号自动添加
var a = 1
// 等同于
var a = 1;

/*
如果continue、break、return和throw这四个语句后面，直接跟换行符，则会自动添加分号。
这意味着，如果return语句返回的是一个对象的字面量，起首的大括号一定要写在同一行，否则得不到预期结果。
*/
return
{ first: 'Jane' };

// 解释成
return;
{ first: 'Jane' };


// 全局变量 大写下划线
var U_D = 1;

// 变量声明变量会提升，先声明在使用

//圆括号
//圆括号（parentheses）在JavaScript中有两种作用，一种表示函数的调用，另一种表示表达式的组合（grouping）
/*
表示函数调用时，函数名与左括号之间没有空格。

表示函数定义时，函数名与左括号之间没有空格。

其他情况时，前面位置的语法元素与左括号之间，都有一个空格。
例子；
function x() {
	xxx
}
*/

//with语句
//with可以减少代码的书写，但是会造成混淆。

// 相等和严格相等
var b1 = 1;
var b2 ='1';
b2 == b1;
b2 === b1

/*
	new 命令：
		上面这种做法的问题是，一旦你忘了加上new，myObject()内部的this关键字就会指向全局对象，
		导致所有绑定在this上面的变量，都变成全局变量。

因此，建议使用Object.create()命令，替代new命令。
如果不得不使用new，为了防止出错，最好在视觉上把构造函数与其他函数区分开来。
比如，构造函数的函数名，采用首字母大写（InitialCap），其他函数名一律首字母小写。
*/

var o = new myObject();